generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  papers       Paper[]

  @@map("admins")
}

model Paper {
  id            Int                 @id @default(autoincrement())
  name          String              @db.VarChar(100)
  imageUrl      String?             @map("image_url")
  uploadedAt    DateTime            @default(now()) @map("uploaded_at")
  adminId       Int                 @map("admin_id")
  totalPages    Int                 @default(1) @map("total_pages")
  questionType  String              @default("traditional") @map("question_type") @db.VarChar(20)
  questionTypes Json?               @default("{}") @map("question_types")
  mixedConfig   Json?               @default("{}") @map("mixed_config")
  totalMarks    Decimal?            @default(0) @map("total_marks") @db.Decimal(5, 2)
  admin         Admin               @relation(fields: [adminId], references: [id])
  questions     Question[]
  submissions   StudentSubmission[]
  images        ImageMetadata[]

  @@map("papers")
}

model Question {
  id              Int    @id @default(autoincrement())
  paperId         Int    @map("paper_id")
  questionNumber  Int    @map("question_number")
  questionText    String @map("question_text")
  pageNumber      Int    @default(1) @map("page_number")
  questionType    String @default("traditional") @map("question_type") @db.VarChar(20)
  options         Json?
  blankPositions  Json?  @default("{}") @map("blank_positions")
  expectedAnswers Json?  @default("{}") @map("expected_answers")
  questionFormat  String @default("multiple_choice") @map("question_format") @db.VarChar(50)
  pointsPerBlank  Int    @default(1) @map("points_per_blank")
  correctOptions  Json   @map("correct_options")
  weightages      Json?
  paper           Paper  @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model StudentSubmission {
  id               Int             @id @default(autoincrement())
  paperId          Int             @map("paper_id")
  studentName      String          @map("student_name") @db.VarChar(100)
  imageUrl         String          @map("image_url")
  score            Decimal         @default(0) @db.Decimal(5, 2)
  totalQuestions   Int             @default(0) @map("total_questions")
  percentage       Decimal         @default(0.00) @db.Decimal(5, 2)
  submittedAt      DateTime        @default(now()) @map("submitted_at")
  answerTypes      Json?           @default("{}") @map("answer_types")
  evaluationMethod String          @default("auto") @map("evaluation_method") @db.VarChar(100)
  evaluationStatus String          @default("pending") @map("evaluation_status") @db.VarChar(20)
  rollNo           String          @map("roll_no") @db.VarChar(20)
  answers          StudentAnswer[]
  images           ImageMetadata[]
  paper            Paper           @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@map("student_submissions")
}

model StudentAnswer {
  id                 Int               @id @default(autoincrement())
  submissionId       Int               @map("submission_id")
  questionNumber     Int               @map("question_number")
  selectedOption     String?           @map("selected_option") @db.VarChar(10)
  isCorrect          Boolean           @default(false) @map("is_correct")
  textAnswer         String?           @map("text_answer")
  blankAnswers       Json?             @default("{}") @map("blank_answers")
  answerType         String            @default("mcq") @map("answer_type") @db.VarChar(20)
  selectedOptions    Json?             @map("selected_options")
  details            String?           @map("details")
  maxPoints          Decimal?          @default(1) @map("max_points") @db.Decimal(5, 2)
  partialScore       Decimal?          @default(0) @map("partial_score") @db.Decimal(5, 2)
  weightageBreakdown Json?             @map("weightage_breakdown")
  submission         StudentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("student_answers")
}

model ImageMetadata {
  id              Int      @id @default(autoincrement())
  objectName      String   @unique @map("object_name") @db.VarChar(500) // MinIO object path
  originalName    String   @map("original_name") @db.VarChar(255) // Original filename
  contentType     String   @default("image/jpeg") @map("content_type") @db.VarChar(100)
  fileSize        BigInt?  @map("file_size") // File size in bytes
  bucketName      String   @default("answer-sheets") @map("bucket_name") @db.VarChar(100)
  category        String   @map("category") @db.VarChar(50) // 'pending', 'evaluated', 'papers'
  studentName     String?  @map("student_name") @db.VarChar(100)
  rollNo          String?  @map("roll_no") @db.VarChar(20)
  paperName       String?  @map("paper_name") @db.VarChar(100)
  score           Decimal? @map("score") @db.Decimal(5, 2)
  totalQuestions  Int?     @map("total_questions")
  percentage      Decimal? @map("percentage") @db.Decimal(5, 2)
  metadata        Json?    @default("{}") // Additional metadata as JSON
  uploadedAt      DateTime @default(now()) @map("uploaded_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  paperId         Int?     @map("paper_id") // Link to paper if it's a paper image
  submissionId    Int?     @map("submission_id") // Link to submission if it's a student submission
  
  paper           Paper?            @relation(fields: [paperId], references: [id], onDelete: SetNull)
  submission      StudentSubmission? @relation(fields: [submissionId], references: [id], onDelete: SetNull)

  @@map("image_metadata")
}
